snippet spec
    require 'spec_helper'
    
    describe ${1:`Snippet_RspecDescribeClassFromFilename()`} do
      before :each do
    	  ${2}
      end
    end

snippet desct
    describe ${1:`Snippet_RspecDescribeClassFromFilename()`} do
    	${2}
    end

snippet descs
    describe "${1:subject}" do
    	${2}
    end

snippet descts
    describe ${1:`Snippet_RspecDescribeClassFromFilename()`}, "${2:description}" do
    	${3}
    end

snippet descc
    describe ${1:`Snippet_RspecDescribeClassFromFilename()`}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4}" do
    	${5}
    end

snippet af
    after :each do
    	${2}
    end

snippet bef
    before :each do
    	${1}
    end

snippet ex
    exactly(${1:n}).times

snippet it
    it '${1}' do
    	${2}
    end

snippet its
    it "should ${1:do something}" do
      ${2}
    end

snippet mattcher
prev_word '^'
    class ${1:ReverseTo}
    	def initialize(${2:param})
    		@$2 = $2
    	end
    
    	def matches?(actual)
    		@actual = actual
    		# Satisfy expectation here. Return false or raise an error if it's not met.
    		${3:@actual.reverse.should == @$2}
    		true
    	end
    
    	def failure_message
    		"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
    	end
    
    	def negative_failure_message
    		"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
    	end
    end
    
    def ${6:reverse_to}(${7:expected})
    	${8}.new($7)
    end

snippet mm
    mock_model(${1:model})${2}

snippet mock
    ${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
    ${4}

snippet mocw
    Spec::Runner.configure do |config|
    	config.mock_with :${1:mocha|flexmock|rr}
    end

snippet specreq
    require File.dirname(__FILE__) + '/../spec_helper'

snippet shbt
    should be_true

snippet shbf
    should be_false

snippet shbn
    should be_nil
    
snippet shnbn
    should_not be_nil
    
snippet sheq
    should == ${2:value}

snippet shb
    should be(${2:result})

snippet shbc
    should be_close(${2:result}, ${3:tolerance})

snippet shbio
    should be_instance_of(${2:class})

snippet shbko
    should be_a_kind_of(${2:class})

snippet shbr
    response.should be_redirect

snippet shbs
    response.should be_success

snippet shc
    lambda {
    	${1}
    }.should change(${2:target}, :${3:method}).from(${4:old_value}).to(${5:new_value}).by(${6:change})

snippet shcb
    lambda {
    	${1}
    }.should change{ ${2:value} }.from(${4:old_value}).to(${5:new_value}).by(${6:change})

snippet shdm
    should match(/${2:regexp}/)

snippet shh
    should have(${2:num}).${3:things}

snippet shhal
    should have_at_least(${2:num}).${3:things}

snippet shham
    should have_at_most(${2:num}).${3:things}

snippet shhr
    should have(${2:n}).records

snippet shneq
    should_not == ${2:value}

snippet shnb
    should_not be(${2:result})

snippet shnbc
    should_not be_close(${2:result}, ${3:tolerance})

snippet shnbio
    should_not be_instance_of(${2:klass})

snippet shnbko
    should_not be_a_kind_of(${2:klass})

snippet shnc
    lambda do
    	${1}
    end.should_not change(${2:target}, :${3:method})

snippet shne
    should_not eql(${2:value})

snippet shneq
    should_not equal(${2:value})

snippet shnm
    should_not match(/${2:regexp}/)

snippet shnp
    should_not be_${2:predicate}

snippet shnr
    should_not_receive(:${2:message})${3}

snippet shnre
    should_not raise_error(${2:error})

snippet shnred
    response.should_not redirect_to(${1:url})

snippet shnrt
    should_not respond_to(:${2:sym})

snippet shns
    should_not satisfy { |${2:obj}| ${3} }

snippet shnt
    lambda { ${1} }.should_not throw_symbol(:${2:symbol})

snippet shp
    should be_${2:predicate}

snippet shr
    should_receive(:${2:message})${3}

snippet shre
    should raise_error(${2:error})

snippet shredt
    response.should redirect_to(${1:url})

snippet shrt
    should respond_to(:${2:sym})

snippet shs
    should satisfy { |${2:obj}| ${3} }

snippet sht
    should throw_symble(:${2:symbol})

snippet shtemp
    response.should render_template(:${1:template})
