include rails
include rspec

snippet     hoge
prev_word   '^'
    `expand("#")`

# Class定義
snippet c
    class ${1:`Snippet_RubyClassNameFromFilename()`}
    	${3}
    end

snippet ce
    class ${1:ErrorClassName} < ${2:StandardError}; end
    ${3}

snippet sinc
    class << self; self end


# Module定義
snippet m
prev_word '^'
    module ${1:`Snippet_RubyClassNameFromFilename()`}
    	${2}
    end

snippet mi
abbr module module ClassMethods end module InstanceMethods end
prev_word '^'
    module ${1:`Snippet_RubyClassNameFromFilename()`}
    	module ClassMethods
    		${2}
    	end
    
    	module InstanceMethods
    
    	end
    
    	def self.included(receiver)
    		receiver.extend         ClassMethods
    		receiver.send :include, InstanceMethods
    	end
    end


# Method定義
snippet d
    def ${1:name}
    	${2}
    end

snippet di
    def initialize${1}
    	${2}
    end

snippet dmm
    def method_missing(meth, *args, &blk)
    	${1}
    end

snippet ds
    def self.${1:class_method_name}
    	${2}
    end

snippet a
    alias_method :${1:new_name}, :${2:old_name}


# Attribute定義
snippet r
    attr_reader :${1:attr_names}

snippet w
    attr_writer :${1:attr_names}

snippet rw
    attr_accessor :${1:attr_names}
   
snippet crw
    cattr_accessor :${1:attr_names}


# 制御構文
snippet if
    if ${1:condition}
    	${2}
    end

snippet elsif
    elsif ${1:condition}
    	${2}

snippet ife
    if ${1:condition}
    	${2}
    else
    end

snippet case
    case ${1}
    when ${2}
    else
    	${3}
    end

snippet casemini
    case ${1}
    when ${2} then ${3}
    end

snippet unless
    unless ${1:condition}
    	${2}
    end

snippet while
    while ${1:condition}
    	${2}
    end


# Block
snippet do
    do
    	${1}
    end

snippet dop
    do |${1:param}|
    	${2}
    end


# Enumerable
snippet each
prev_word '.'
    each(&:${1})

snippet eachdo
prev_word '.'
    each do |${1:element}|
    	${2:process}
    end

snippet coll
prev_word '.'
    collect { |${1:element}| ${2:process} }
    
snippet colldo
prev_word '.'
    collect do |${1:element}|
    	${2:body}
    end

snippet colls
prev_word '.'
    collect(&:${1:Method Name})

snippet map
prev_word '.'
    collect(&:${1:Method Name})

snippet sel
prev_word '.'
    select { |${1:element}| ${2:Include condition...} }

snippet selo
prev_word '.'
    select do |${1:element}|
    	${2:Include condition...}
    end

snippet det
prev_word '.'
    detect { |${1:element}| ${2:Not include condition...} }

snippet detdo
prev_word '.'
    detect do |${1:element}|
    	${2:Not include condition...}
    end
    
snippet rej
prev_word '.'
    reject { |${1:element}| ${2:Not include condition...} }

snippet rejdo
prev_word '.'
    reject do |${1:element}|
    	${2:Not include condition...}
    end
    
snippet inj
prev_word '.'
    inject(${1:init}) { |${2:total}, ${3:next}| ${4:body} }

snippet injdo
prev_word '.'
    inject(${1:init}) do |${2:total}, ${3:next}|
    	${4:body}
    end

snippet sort
    sort { |${1:x},${2:y}| ${3:body} }

snippet sordo
    sort do |${1:x},${2:y}|
    	${3:body}
    end


# File
snippet glob
    Dir.glob(${1:glob}) do |path|
      ${2}
    end

snippet openw
    open(${1:path}, 'w')

snippet fileeach
    File.foreach(${1:"<+path}"+>) { |${2:line}| ${3} }

snippet fileputs
    open(${1:path}, 'w') { |io| io.puts(${2}) }

snippet fileread
    IO.foreach(${1:path}) do |line|
      ${2}
    end

snippet filejoin
    File.join(${1}, ${2})

snippet pathhere
    File.join(File.dirname(__FILE__), ${1:path here})


# CSV
snippet csvread
    require 'csv'

    CSV.foreach(${1:path}) do |row|
      ${2}
    end

snippet csvwrite
    require 'csv'
    
    CSV.open(${1:path}, 'w') do |writer|
      ${2}
    end


# Net::HTTP
snippet httpget
    require 'net/http'
    
    res = Net::HTTP.get URI.parse('${1:url}')

snippet httppost
    require 'net/http'
    
    res = Net::HTTP.post_form URI.parse('${1:url}')${2:, params}


# Net::FTP
snippet ftp
    require 'net/ftp'


# Net::Pop
snippet pop3
    require 'net/pop3'

# Marshal
snippet Md
    File.open(${1:dump_path}, "wb") { |${2:file}| Marshal.dump(${3:obj}, ${4:$2}) }

snippet Ml
    File.open(${1:dump_path}, "rb") { |${2:file}| Marshal.load(${3:$2}) }


# PStore
snippet Pn
    PStore.new(${1})


# Rake
snippet task
    desc "${1:Task description}"
    task :${2:task_name}${3: => [:dependent, :tasks]} do
    	${4}
    end


# YAML
snippet Yd
    File.open(${1:path_to_yml}, "w") { |${2:file}| YAML.dump(${3:obj}, ${4:$2}) }

snippet Yl
    File.open(${1:path_to_yml}) { |${2:file}| YAML.load(${3:$2}) }


# Factory
snippet fac
    Factory(:<+factory_name+><+, <++>+>)<++>

snippet facb
    Factory.build(:<+factory_name+><+, <++>+>)<++>

snippet facd
    Factory.define(:${1:model}) do |${2:m}|
    	${3}
    end
    ${4}

snippet facn
    Factory.next(:${1:sequence-name})${2}

snippet facs
    Factory.sequence :${1:sequence-name} do |${2:m}|
    	${3}
    end
    ${4}


# TestUnit
#snippet tc
#    require "test/unit"
#    
#    require "${1:library_file_name}"
#    
#    class Test${2:`Snippet_RubyClassNameFromFilename()`} < Test::Unit::TestCase
#    	def test_${3:case_name}
#    		${4}
#    	end
#    end
#
#snippet anr
#    assert_nothing_raised(${1:Exception}) { ${2} }
#
#snippet as
#    assert ${1:test}, "${2:failure_message}"
#
#snippet ase
#    assert_equal ${1:expected}, ${2:actual}
#
#snippet asid
#    assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:delta_float}
#
#snippet asio
#    assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}
#
#snippet asko
#    assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}
#
#snippet asm
#    assert_match /${1:expected_pattern}/, ${2:actual_string}
#
#snippet asn
#    assert_nil ${1:instance}
#
#snippet asne
#    assert_not_equal ${1:unexpected}, ${2:actual}
#
#snippet asnm
#    assert_no_match /${1:unexpected_pattern}/, ${2:actual_string}
#
#snippet asnn
#    assert_not_nil ${1:instance}
#
#snippet asns
#    assert_not_same ${1:unexpected}, ${2:actual}
#
#snippet asnt
#    assert_nothing_thrown { ${1} }
#
#snippet aso
#    assert_operator ${1:left}, :${2:operator}, ${3:right}
#
#snippet asr
#    assert_raise(${1:Exception}) { ${2} }
#
#snippet asrt
#    assert_respond_to ${1:object}, :${2:method}
#
#snippet ass
#    assert_send [${1:object}, :${2:message}, ${3:args}]
#
#snippet ast
#    assert_throws(:${1:expected}) { ${2} }
#
#snippet art
#    assert_redirected_to ${1::action => "${2:index}"}
#
#snippet artnp
#    assert_redirected_to <+<+parent+>_<+child+>_path(<+@<+parent+>+>, <+@<+child+>+>)+>
#
#snippet artnpp
#    assert_redirected_to <+<+parent+>_<+child+>_path(<+@<+parent+>+>)+>
#
#snippet artp
#    assert_redirected_to <+<+model+>_path(<+@<+model+>+>)+>
#
#snippet artpp
#    assert_redirected_to <+<+model+>s_path+>
#
#snippet asd
#    assert_difference "${1:Model}.${2:count}", $1 do
#    	${3}
#    end
#
#snippet asnd
#    assert_no_difference "${1:Model}.${2:count}" do
#    	${3}
#    end
#
#snippet asre
#    assert_response :${1:success}, @response.body${2}
#
#snippet asrj
#    assert_rjs :<+replace+>, <+"<+dom id+>"+>
#
#snippet ass
#    assert_select '<+path+>'<+, :<+text+> => <+'<+inner_html+>'+>+> <+do<++>+>
#
#snippet bm
#    TESTS = ${1:10_000}
#    Benchmark.bmbm do |results|
#    	${2}
#    end
#
#snippet deft
#    def test_${1:case_name}
#    	${2}
#    end
#
#snippet ip
#    ip_addr = request.env['REMOTE_ADDR']
#
#snippet rep
#    results.report("${1:name}:") { TESTS.times { ${2} } }

# Digest
snippet sha1
    Digest::SHA1.hexdigest(${1:string})

snippet wants
    wants.<+js|xml|html+> <+{ <++> }+>

snippet xdelete
    xhr :delete, :${1:destroy}, :id => ${2:1}${3}

snippet xget
    xhr :get, :<+show+><+, :id => <+1+>+><++>

snippet xpost
    xhr :post, :${1:create}, :${2:object} => { ${3} }

snippet xput
    xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}

