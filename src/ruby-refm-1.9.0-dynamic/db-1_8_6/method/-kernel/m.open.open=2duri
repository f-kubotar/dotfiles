visibility=public
kind=redefined
names=open

--- open(name, *rest)                -> StringIO | File
--- open(name, *rest) {|ouri| ...}   -> nil

name が http:// や ftp:// で始まっている文字列なら URI のリソースを
取得した上で [[c:StringIO]] オブジェクトとして返します。

name に open メソッドが定義されている場合は、*rest を引数として渡し
name.open(*rest, &block) のように name の open メソッドが呼ばれます。

これ以外の場合は、name はファイル名として扱われ、従来の
[[m:Kernel#open]](name, *rest) が呼ばれます。

  require 'open-uri'
  sio = open('http://www.example.com')
  p sio.is_a?(OpenURI::Meta) # => true
  p sio.content_type
  puts sio.read

ブロックを与えた場合は上の場合と同様、name が http:// や ftp:// で
始まっている文字列なら URI のリソースを取得した上で [[c:StringIO]] オブジェクトを
引数としてブロックを評価します。後は同様です。

@param name オープンしたいリソースを文字列で与えます。

@param rest [[m:OpenURI.open_uri]] を参照して下さい。

@return 返り値である StringIO オブジェクトは [[c:OpenURI::Meta]] モジュールで extend されています。

@raise OpenURI::HTTPError 対象となる URI のスキームが http であり、かつリソースの取得に失敗した時に発生します。

@raise Net::FTPError 対象となる URI のスキームが ftp であり、かつリソースの取得に失敗した時に [[c:Net::FTPError]] のサブクラスが発生します。詳しくは [[lib:net/ftp]] を参照して下さい。

