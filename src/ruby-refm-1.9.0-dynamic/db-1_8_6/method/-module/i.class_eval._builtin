visibility=public
kind=defined
names=class_eval,module_eval

--- module_eval(expr, fname = '(eval)', lineno = 1) -> object
--- module_eval{|mod| .... } -> object
--- class_eval(expr, fname = '(eval)', lineno = 1) -> object
--- class_eval{|mod| ... } -> object

モジュールのコンテキストで文字列 expr を評価してその結果を返します。

fname、lineno が与えられた場合は、ファイル fname、
行番号 lineno にその文字列があるかのようにコンパイルされ、
スタックトレース表示などのファイル名／行番号を差し替えることができます。

ブロックが与えられた場合にはそのブロックを
モジュールのコンテキストで評価してその結果を返します。
ブロックの引数 mod には self が渡されます。

モジュールのコンテキストで評価するとは、
実行中そのモジュールが self になるということです。
つまり、そのモジュールの定義文の中にあるかのように
実行されます。

ただし、ローカル変数は module_eval/class_eval の外側のスコープと共有します。

ブロックが与えられた場合は、
定数とクラス変数のスコープも外側のスコープになります。

=== 注意
module_eval のブロック中でメソッドを定義する場合、
[[m:Object#instance_eval]] と同様の制限があります。
詳細はそちらの説明を参照してください。

@param expr 評価される文字列。
@param fname スタックトレースに表示するファイル名。
@param lineno スタックトレースに表示する行番号。

@return expr を評価した結果。

@see [[m:Object#instance_eval]], [[m:Module.new]]

