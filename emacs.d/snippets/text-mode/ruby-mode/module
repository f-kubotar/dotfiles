# -*- mode: snippet -*-
# name: module .. end
# group: definitions
# --
module ${1:`(let ((fn (capitalize (file-name-nondirectory
                                 (file-name-sans-extension
				 (or (buffer-file-name)
				     (buffer-name (current-buffer))))))))
           (cond
             ((string-match "_" fn) (replace-match "" nil nil fn))
              (t fn)))`}
  $0
${2:module ClassMethods
    ${3}
  end

  module InstanceMethods
  end

  def self.included(receiver)
    receiver.extend         ClassMethods
    receiver.send :include, InstanceMethods
  end}
end
